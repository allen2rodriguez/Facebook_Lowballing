# Description: This page is used to scrape data off of Offerup listings to be pased on to my LMM
# Author: Allen Rodriguez
# Version: 1.0.0

from selenium import webdriver # To load the page and the data on it
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
import time

# Set up the WebDriver
service = Service(executable_path="chromedriver.exe")
driver = webdriver.Chrome(service=service)

def web_scrape(page: str) -> list:
    """
    Begins the process of scraping the OfferUp listing page for relevant information that can be passed on to the LLM.
    Parameters
    ----------
    page : str
        The URL of the OfferUp listing page to scrape.
    Returns
    -------      
    list
        A list containing the title, price, description, and seller's name.
    Raises
    ------
    Exception
        If the page cannot be loaded or if elements are not found. (***This is not implemented yet, but can be added later)
    """
    # Open up the page
    driver.get(page)
    # Gather Info: Title, Description, Price, Seller's Name
    title = driver.find_element(By.TAG_NAME, "h1")
    info = driver.find_elements(By.TAG_NAME,'p') # info[0] is the price, info[x] is the description,
    price = info[0].text
    description = [
        element for element in info 
        if "MuiTypography-root MuiTypography-body1 MuiTypography-colorTextPrimary" 
        in element.get_attribute("class")
        ]
    description_text = [element.text for element in description]    
    sellers_name = [
        element for element in info 
        if "MuiTypography-root MuiTypography-subtitle1 MuiTypography-colorTextPrimary" 
        in element.get_attribute("class")]
    sellers_text = sellers_name[0].text if sellers_name else "No seller name found"
    listing = [title.text, price, description_text[-1], sellers_text]
    driver.quit()
    return listing

def fill_text_area(text: str, by, value) -> None:
    '''
    Fills in the text area 
    '''
    element = driver.find_element(by, value)
    element.clear()
    element.send_keys(text)

def send_message(message: str, page: str, username: str, password: str) -> None:
    """
    Sends the direct message on OfferUp to the author about the post.

    Parameters
    ----------
    message : str
        This is the message generated by the AI.
    
    Returns
    -------
    None - For now, but can be changed to return a success or failure message.

    Raises
    ------
    NotImplementedError
        This function is not implemented yet.
    """
    # TODO: Figure out why button clicks are not working
    print("\nSending message to the author of the post...")
    driver.get(page)
    # Log in
    driver.find_elements(By.TAG_NAME, "button")[9].click()
    driver.find_elements(By.TAG_NAME, "button")[-1].click() # Press the continue with Email
    driver.find_elements(By.TAG_NAME, "button")[-1].click()








    # Continue working on after finishing with above 
    # Input Username and password
    email_input = driver.find_element(By.NAME, "email")
    email_input.clear()
    email_input.send_keys(username)
    password_input = driver.find_element(By.NAME, "password")
    password_input.clear()
    password_input.send_keys(password)
    time.sleep(30)
    driver.quit()
'''
Testing of the send_message function
'''
send_message("Hello, I'm interested, whats the lowest you can go?", "https://offerup.com/item/detail/97002bbe-7c67-3859-9698-a237561cea0a?q=racing+seats","joeshmo", "password123")